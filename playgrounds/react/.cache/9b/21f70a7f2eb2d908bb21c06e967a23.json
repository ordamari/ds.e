{
  "id": "../../../node_modules/@or.ds.e/react/lib/molecules/Select/Select.js",
  "dependencies": [
    {
      "name": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\@or.ds.e\\react\\lib\\molecules\\Select\\Select.js.map",
      "includedInParent": true,
      "mtime": 1689340166893
    },
    {
      "name": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\playgrounds\\react\\package.json",
      "includedInParent": true,
      "mtime": 1689269456127
    },
    {
      "name": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\@or.ds.e\\react\\package.json",
      "includedInParent": true,
      "mtime": 1689271442186
    },
    {
      "name": "react",
      "loc": { "line": 1, "column": 52, "index": 52 },
      "parent": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\@or.ds.e\\react\\lib\\molecules\\Select\\Select.js",
      "resolved": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\react\\index.js"
    },
    {
      "name": "../../atoms/Text/Text.js",
      "loc": { "line": 2, "column": 17, "index": 78 },
      "parent": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\@or.ds.e\\react\\lib\\molecules\\Select\\Select.js",
      "resolved": "C:\\Users\\User\\Desktop\\My Projects\\web\\ds.e\\node_modules\\@or.ds.e\\react\\lib\\atoms\\Text\\Text.js"
    }
  ],
  "generated": {
    "js": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _Text = _interopRequireDefault(require(\"../../atoms/Text/Text.js\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nconst KEY_CODES = {\n  ENTER: 13,\n  SPACE: 32,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n  ESC: 27\n};\nconst Select = ({\n  options = [],\n  label: defaultLabel = 'Please select an option...',\n  onOptionSelect: handler,\n  renderOption\n}) => {\n  const [isOpen, setIsOpen] = (0, _react.useState)(false);\n  const [highLightOptionIndex, setHighLightOptionIndex] = (0, _react.useState)(0);\n  const [optionsRefs, setOptionsRefs] = (0, _react.useState)([]);\n  const [selectedOptionIndex, setSelectedOptionIdx] = (0, _react.useState)(null);\n  const toggleIsOpen = () => {\n    setIsOpen(prev => !prev);\n  };\n  const highLightOption = optionIndex => {\n    setHighLightOptionIndex(optionIndex);\n  };\n  const getNextOptionIndex = currentOptionIndex => {\n    if (currentOptionIndex === null) return 0;\n    if (currentOptionIndex === options.length - 1) return 0;\n    return currentOptionIndex + 1;\n  };\n  const getPreviousOptionIndex = currentOptionIndex => {\n    if (!currentOptionIndex) return options.length - 1;\n    return currentOptionIndex - 1;\n  };\n  const onLabelKeyDown = event => {\n    event.preventDefault();\n    switch (event.keyCode) {\n      case KEY_CODES.ENTER:\n      case KEY_CODES.SPACE:\n      case KEY_CODES.DOWN_ARROW:\n        setIsOpen(true);\n        setHighLightOptionIndex(0);\n        break;\n    }\n  };\n  const onOptionKeyDown = event => {\n    switch (event.keyCode) {\n      case KEY_CODES.ESC:\n        setIsOpen(false);\n        break;\n      case KEY_CODES.DOWN_ARROW:\n        setHighLightOptionIndex(getNextOptionIndex);\n        break;\n      case KEY_CODES.UP_ARROW:\n        setHighLightOptionIndex(getPreviousOptionIndex);\n        break;\n      case KEY_CODES.ENTER:\n      case KEY_CODES.SPACE:\n        if (highLightOptionIndex === null) return;\n        const option = options[highLightOptionIndex];\n        if (!option) return;\n        onOptionSelect(option, highLightOptionIndex);\n    }\n  };\n  const onOptionSelect = (option, optionIndex) => {\n    if (handler) handler(option, optionIndex);\n    setSelectedOptionIdx(optionIndex);\n    setIsOpen(false);\n  };\n  const onLabelClick = () => {\n    toggleIsOpen();\n  };\n  (0, _react.useEffect)(() => {\n    setOptionsRefs(options.map(() => _react.default.createRef()));\n  }, [options.length]);\n  (0, _react.useEffect)(() => {\n    if (!isOpen) {\n      setHighLightOptionIndex(null);\n      return;\n    }\n    if (highLightOptionIndex === null) {\n      setHighLightOptionIndex(0);\n      return;\n    }\n    if (highLightOptionIndex === null || !isOpen) return;\n    const ref = optionsRefs[highLightOptionIndex];\n    if (ref && ref.current) ref.current.focus();\n  }, [isOpen, highLightOptionIndex]);\n  const label = (0, _react.useMemo)(() => {\n    if (selectedOptionIndex === null) return defaultLabel;\n    const selectedOption = options[selectedOptionIndex];\n    if (selectedOption) return selectedOption.label;\n    return defaultLabel;\n  }, [selectedOptionIndex]);\n  const caretClassName = (0, _react.useMemo)(() => {\n    if (isOpen) return 'dse-select__caret--open';\n    return 'ds-select__caret--closed';\n  }, [isOpen]);\n  return _react.default.createElement(\"div\", {\n    className: \"dse-select\"\n  }, _react.default.createElement(\"button\", {\n    \"aria-haspopup\": true,\n    \"aria-expanded\": isOpen ? true : undefined,\n    \"aria-controls\": \"dse-select-list\",\n    className: \"dse-select__label\",\n    onClick: onLabelClick,\n    onKeyDown: onLabelKeyDown\n  }, _react.default.createElement(_Text.default, null, label), _react.default.createElement(\"svg\", {\n    fill: \"none\",\n    className: `dse-select__caret ${caretClassName}`,\n    stroke: \"currentColor\",\n    strokeWidth: \"1.5\",\n    width: \"1rem\",\n    height: \"1rem\",\n    viewBox: \"0 0 24 24\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-hidden\": \"true\"\n  }, _react.default.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M19.5 8.25l-7.5 7.5-7.5-7.5\"\n  }))), isOpen ? _react.default.createElement(\"ul\", {\n    role: \"menu\",\n    id: \"dse-select-list\",\n    className: \"dse-select__overlay\"\n  }, options.map((option, index) => {\n    const isSelected = selectedOptionIndex === index;\n    const isHighLighted = highLightOptionIndex === index;\n    const className = `dse-select__option ${isSelected ? 'dse-select__option--selected' : ''} ${isHighLighted ? 'dse-select__option--highlighted' : ''}`;\n    const key = option.label + index;\n    const ref = optionsRefs[index];\n    const onClick = () => onOptionSelect(option, index);\n    const renderOptionProps = {\n      isSelected,\n      option,\n      getOptionRecommendedProps: (overrideProps = {}) => {\n        {\n          return {\n            className,\n            onClick,\n            key,\n            ref,\n            tabIndex: isHighLighted ? -1 : 0,\n            'area-checked': isSelected ? true : undefined,\n            'area-label': option.label,\n            role: 'menuitemradio',\n            onKeyDown: onOptionKeyDown,\n            onMouseEnter: highLightOption.bind(null, index),\n            onMouseLeave: highLightOption.bind(null, null),\n            ...overrideProps\n          };\n        }\n      }\n    };\n    if (renderOption) return renderOption(renderOptionProps);\n    return _react.default.createElement(\"li\", {\n      ...renderOptionProps.getOptionRecommendedProps()\n    }, _react.default.createElement(\"button\", {\n      onClick: onClick\n    }, _react.default.createElement(_Text.default, null, option.label), isSelected ? _react.default.createElement(\"svg\", {\n      fill: \"none\",\n      width: \"1rem\",\n      height: \"1rem\",\n      stroke: \"currentColor\",\n      strokeWidth: \"1.5\",\n      viewBox: \"0 0 24 24\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      \"aria-hidden\": \"true\"\n    }, _react.default.createElement(\"path\", {\n      strokeLinecap: \"round\",\n      strokeLinejoin: \"round\",\n      d: \"M4.5 12.75l6 6 9-13.5\"\n    })) : null));\n  })) : null);\n};\nexports.default = Select;"
  },
  "sourceMaps": { "js": { "mappings": [], "sources": {}, "lineCount": null } },
  "error": null,
  "hash": "c2a9d8bb9edd451aeb5ee7c471db8bf7",
  "cacheData": { "env": {} }
}
